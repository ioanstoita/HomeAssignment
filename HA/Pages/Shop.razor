@page "/shop"

@attribute [Authorize()]

@using HA.Models
@using HA.Services
@inject IProductService productService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authenticationStateProvider
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager

<h1>Shop</h1>

<p>Here you can buy products from all retailers.</p>
<p>PS: User cart not implemented...</p>


@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <!--<th>Id</th>-->
                <th>Name</th>
                <th>Price</th>
                <th>Retailer</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <!--<td>@product.Id</td>-->
                    <td>@product.Name</td>
                    <td>@(product.RebatePrice > 0 ? (product.RebatePrice + "$ from " + product.Price + "$") : (product.Price + "$"))</td>
                    <!--<td>@product.Price</td>-->
                    <td>@product.Retailer.UserName</td>
                    <td><button>Add to chart</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> products;
    private string username = default!;
    private ApplicationUser user;

    protected override async Task OnInitializedAsync()
    {
        // get retailer's username
        var authstate = await authenticationStateProvider.GetAuthenticationStateAsync();
        user = await userManager.GetUserAsync(authstate.User);

        products = await productService.GetAllCustomerProductsAsync(user.UserName);
    }
}
