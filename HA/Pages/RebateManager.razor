@page "/rebate"

@attribute [Authorize(Roles = "admin, retailer")]

@using HA.Models
@using HA.Services
@inject IRebateService rebateService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider authenticationStateProvider
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> userManager

<h1>Rebate Management</h1>

<p>Here you can manage your customers' rebates.</p>


<div>
        <EditForm Model="@newRebate" OnSubmit="@AddRebate">
            <label>Customer Name</label>
            <input @bind="newRebate.Customer.UserName" placeholder="MyCustomer@gmail.com" />
            <label>Rebate Type</label>
            <!--<select @bind="rebate.RebateType">
                <option value="0">Percent (%)</option>
                <option value="1">Value ($)</option>
            </select>-->
            <label>Rebate Percent (%)</label>
            <input @bind="newRebate.RebatePercent" placeholder="0" />

            <input type="submit" value="Add rebate" class="btn btn-primary" />
        </EditForm>
</div>


@if (rebates == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <!--<th>Id</th>-->
                <th>Customer Name</th>
                <th>Rebate Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rebate in rebates)
            {
                <tr>
                    <!--<td>@product.Id</td>-->
                    <td>@rebate.Customer.UserName</td>
                    <td>@rebate.RebatePercent%</td>
                    <!--<td>@rebate.RebateValue@(rebate.RebateType == 0 ? "%" : "$")</td>-->
                    <td><button @onclick="(() => DeleteRebate(rebate))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Rebate> rebates;
    private Rebate newRebate = new Rebate { Customer = new ApplicationUser() };

    private ApplicationUser user;


    protected override async Task OnInitializedAsync()
    {
        // get retailer's username
        var authstate = await authenticationStateProvider.GetAuthenticationStateAsync();
        user = await userManager.GetUserAsync(authstate.User);

        rebates = await rebateService.GetAllRetailerRebatesAsync(user.UserName);
    }

    public async Task AddRebate()
    {
        if (!string.IsNullOrEmpty(newRebate.Customer.UserName) && newRebate.RebatePercent > 0 && newRebate.RebatePercent <= 100)
        {
            newRebate.Retailer = user;
            newRebate = await rebateService.AddRebate(newRebate);
            newRebate = new Rebate { Customer = new ApplicationUser() };
            rebates = await rebateService.GetAllRetailerRebatesAsync(user.UserName);
        }
    }

    public async Task DeleteRebate(Rebate rebate)
    {
        await rebateService.DeleteRebate(rebate);
        rebates = await rebateService.GetAllRetailerRebatesAsync(user.UserName);
    }
}
